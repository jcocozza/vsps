package cmd

import (
	"fmt"

	"github.com/jcocozza/vsps/internal"
	"github.com/spf13/cobra"
)

var customPassword bool
var passwordLength int
var excludeCaps bool
var excludeDigits bool
var excludeSpecialChars bool
var addExtra bool

func addField(account *internal.Account) {
	adding := true
	for {
		var fieldNameInput string
		var fieldValueInput string
		fmt.Print("account field name: ")
		fmt.Scanln(&fieldNameInput)
		fmt.Print(fieldNameInput + " value: ")
		fmt.Scanln(&fieldValueInput)

		account.Other[fieldNameInput] = fieldValueInput

		answer, err := askYesNo("finished adding extra fields?")
		if err != nil {
			fmt.Println(err.Error())
			return
		}
		switch answer {
		case no:
			adding = true
		default:
			adding = false
		}

		if !adding {
			break
		}
	}
}

var newAccount = &cobra.Command{
	Use:   "new",
	Short: "create a new account",
	Run: func(cmd *cobra.Command, args []string) {
		var acctNameInput string
		var usernameInput string
		var passwordInput string

		fmt.Print("Account Name: ")
		fmt.Scanln(&acctNameInput)

		accts, err := internal.AccountLoader(accountsFilePath, encrypted, masterpassword)
		if err != nil {
			fmt.Printf("failed to load account: %s ", err.Error())
			return
		}
		if accts.Exists(acctNameInput) {
			fmt.Printf("account %s already exists", acctNameInput)
			return
		}

		fmt.Print("Username: ")
		fmt.Scanln(&usernameInput)

		if customPassword {
			fmt.Print("Password: ")
			fmt.Scanln(&passwordInput)
		} else {
			var err error
			passwordInput, err = internal.GeneratePassword(passwordLength, !excludeSpecialChars, !excludeDigits, !excludeCaps)
			if err != nil {
				fmt.Println(err.Error())
				return
			}
		}

		account := internal.Account{
			Name:     acctNameInput,
			Username: usernameInput,
			Password: passwordInput,
			Other:    make(map[string]string),
		}

		if addExtra {
		    addField(&account)
        }

		err = account.Writer(accountsFilePath, encrypted, masterpassword)
		if err != nil {
			fmt.Println(err.Error())
			return
		}

		err = account.CopyPassword()
		if err != nil {
			fmt.Println(err.Error())
			fmt.Println("your account has still been written and saved. however, copying password failed.")
			return
		}
		fmt.Printf("copied password for %s ", account.Name)
	},
}

func init() {
	newAccount.Flags().BoolVarP(&customPassword, "password", "p", false, "include this flag if you want to specify your own password instead of having it be auto-generated")
	newAccount.Flags().IntVarP(&passwordLength, "pass-length", "l", 25, "set the auto generated password length")
	newAccount.Flags().BoolVarP(&excludeCaps, "exclude-caps", "c", false, "exclude capital letters from autogenerated password")
	newAccount.Flags().BoolVarP(&excludeDigits, "exclude-digits", "d", false, "exclude digits [0-9] from autogenerated password")
	newAccount.Flags().BoolVarP(&excludeSpecialChars, "exclude-special-chars", "s", false, "exclude special characters from autogenerated password")
	newAccount.Flags().BoolVarP(&addExtra, "include-extra-account-information", "i", false, "optionally set additional information for your account. i.e. account number, security questions, etc")

	rootCmd.AddCommand(newAccount)
}
